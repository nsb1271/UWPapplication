<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="$(PackageDir)\Newtonsoft.Json.6.0.8\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
<#
var file = this.Host.ResolvePath(@"..\..\..\common\settings.json");
var json = JObject.Parse(File.ReadAllText(file));
#>
// This is an automatically generated file, based on settings.json and PackageSettingsGen.tt
/* settings.json content:
<#@ include file="..\..\..\common\settings.json" #>
*/

using GitHub.Settings;
using GitHub.Primitives;
using GitHub.VisualStudio.Helpers;

namespace GitHub.VisualStudio.Settings {

    public partial class PackageSettings : NotificationAwareObject, IPackageSettings
    {

<#
foreach (var j in json["settings"].Children()) {
    var type = j["type"].ToString();
    if (type == "object")
        type = j["typename"].ToString();
    var field = Char.ToLower(j["name"].ToString()[0]) + j["name"].ToString().Substring(1);
#>
        <#= type #> <#= field #>;
        public <#= type #> <#= j["name"] #>
        {
            get { return <#= field #>; }
            set { <#= field #>  = value; this.RaisePropertyChange(); }
        }

<#
}
#>

        void LoadSettings()
        {
<#
foreach (var j in json.Children().Children().Children()) {
    if (j["type"].ToString() == "object")
    {
#>
            <#= j["name"] #> = SimpleJson.DeserializeObject<<#= j["typename"] #>>((string)settingsStore.Read("<#= j["name"] #>", "{}"));
<#
    }
    else
    {
#>
            <#= j["name"] #> = (<#= j["type"] #>)settingsStore.Read("<#= j["name"] #>", <#= j["default"] #>);
<#
    }
}
#>
        }

        void SaveSettings()
        {
<#
foreach (var j in json.Children().Children().Children()) {
    if (j["type"].ToString() == "object")
    {
#>
            settingsStore.Write("<#= j["name"] #>", SimpleJson.SerializeObject(<#= j["name"] #>));
<#
    }
    else
    {
#>
            settingsStore.Write("<#= j["name"] #>", <#= j["name"] #>);
<#
    }
}
#>
        }

    }
}