<local:GenericRepositoryCloneControl x:Class="GitHub.VisualStudio.UI.Views.Controls.RepositoryCloneControl"
                            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                            xmlns:cache="clr-namespace:GitHub.UI.Helpers;assembly=GitHub.UI"
                            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                            xmlns:helpers="clr-namespace:GitHub.Helpers;assembly=GitHub.UI"
                            xmlns:local="clr-namespace:GitHub.VisualStudio.UI.Views.Controls"
                            xmlns:prop="clr-namespace:GitHub.VisualStudio.UI;assembly=GitHub.VisualStudio.UI"
                            xmlns:sampleData="clr-namespace:GitHub.SampleData;assembly=GitHub.App"
                            xmlns:ui="clr-namespace:GitHub.UI;assembly=GitHub.UI"
                            xmlns:uirx="clr-namespace:GitHub.UI;assembly=GitHub.UI.Reactive"
                            xmlns:automation="clr-namespace:GitHub.UI.TestAutomation;assembly=GitHub.UI"
                            d:DesignHeight="440"
                            d:DesignWidth="414"
                            Background="Transparent"
                            mc:Ignorable="d"
                            AutomationProperties.AutomationId="{x:Static automation:AutomationIDs.RepositoryCloneControlCustom}" >
  <d:DesignProperties.DataContext>
    <Binding>
      <Binding.Source>
        <sampleData:RepositoryCloneViewModelDesigner />
      </Binding.Source>
    </Binding>
  </d:DesignProperties.DataContext>

  <Control.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <cache:SharedDictionaryManager Source="pack://application:,,,/GitHub.UI;component/SharedDictionary.xaml" />
        <cache:SharedDictionaryManager Source="pack://application:,,,/GitHub.UI.Reactive;component/SharedDictionary.xaml" />
      </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
  </Control.Resources>

  <DockPanel LastChildFill="True">
    <DockPanel.Resources>
      <Style x:Key="repositoryBorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="#EAEAEA" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="0" />
      </Style>

      <Style x:Key="expanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border Padding="{TemplateBinding Padding}" Style="{StaticResource repositoryBorderStyle}">
                <StackPanel Background="#F8F8F8" Orientation="Horizontal">
                  <ui:OcticonImage x:Name="arrow"
                                   Height="10"
                                   Margin="5,0,0,0"
                                   Foreground="Black"
                                   Icon="triangle_right" />
                  <ContentPresenter Margin="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="True" />
                </StackPanel>
              </Border>

              <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="True">
                  <Setter TargetName="arrow" Property="Icon" Value="triangle_down" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="expanderHeaderFocusVisual">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate>
              <Border>
                <Rectangle Margin="0"
                           SnapsToDevicePixels="true"
                           Stroke="Black"
                           StrokeDashArray="1 2"
                           StrokeThickness="1" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="cloneGroupExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Expander}">
              <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="3"
                      SnapsToDevicePixels="true">
                <DockPanel>
                  <ToggleButton x:Name="HeaderSite"
                                MinWidth="0"
                                MinHeight="0"
                                Margin="0"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                DockPanel.Dock="Top"
                                FocusVisualStyle="{StaticResource expanderHeaderFocusVisual}"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontSize="{TemplateBinding FontSize}"
                                FontStretch="{TemplateBinding FontStretch}"
                                FontStyle="{TemplateBinding FontStyle}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Padding="{TemplateBinding Padding}"
                                Style="{StaticResource expanderDownHeaderStyle}" />
                  <ContentPresenter x:Name="ExpandSite"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    DockPanel.Dock="Bottom"
                                    Focusable="false"
                                    Visibility="Collapsed" />
                </DockPanel>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="true">
                  <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </DockPanel.Resources>

    <ui:FilterTextBox x:Name="filterText"
                      Margin="10"
                      DockPanel.Dock="Top"
                      PromptText="{x:Static prop:Resources.filterTextPromptText}"
                      Text="{Binding FilterText, UpdateSourceTrigger=PropertyChanged}"
                      IsEnabled="{Binding FilterTextIsEnabled, Mode=OneWay}"
                      AutomationProperties.AutomationId="{x:Static automation:AutomationIDs.SearchRepositoryTextBox}" />

    <StackPanel x:Name="loadingFailedPanel"
                Margin="0,4,0,4"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                DockPanel.Dock="Top">
      <uirx:ErrorMessageDisplay x:Name="loadingFailedMessage"
                                Margin="8,0"
                                Content="{x:Static prop:Resources.loadingFailedMessageContent}"
                                Icon="stop"
                                Message="{x:Static prop:Resources.loadingFailedMessageMessage}"
                                Visibility="{Binding LoadingFailed, Mode=OneWay, Converter={ui:BooleanToVisibilityConverter}}" />
    </StackPanel>

    <ui:OcticonCircleButton x:Name="cloneButton"
                            Margin="12"
                            HorizontalAlignment="Center"
                            DockPanel.Dock="Bottom"
                            Icon="check"
                            IsDefault="True"
                            Command="{Binding CloneCommand}"
                            AutomationProperties.AutomationId="{x:Static automation:AutomationIDs.CloneRepositoryButton}" >
      <TextBlock Text="{x:Static prop:Resources.CloneLink}" />
    </ui:OcticonCircleButton>

    <Border DockPanel.Dock="Bottom" Style="{StaticResource repositoryBorderStyle}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ui:PromptTextBox x:Name="clonePath"
                          Grid.Column="1"
                          Margin="0,2"
                          Text="{Binding BaseRepositoryPath, UpdateSourceTrigger=PropertyChanged}"
                          AutomationProperties.AutomationId="{x:Static automation:AutomationIDs.CreateRepositoryLocalPathTextBox}"
                          />
        <Button x:Name="browsePathButton"
                Grid.Column="2"
                Margin="4,0,4,0"
                VerticalContentAlignment="Center"
                Content="{x:Static prop:Resources.browsePathButtonContent}"
                Padding="0"
                Style="{StaticResource GitHubBlueLinkButton}"
                Command="{Binding BrowseForDirectory}"
                AutomationProperties.AutomationId="{x:Static automation:AutomationIDs.CloneRepositoryLocalPathBrowsePathButton}"
                />
        <Label Grid.Row="3"
               Grid.Column="0"
               Margin="4,0"
               Content="{x:Static prop:Resources.pathText}"
               Target="{Binding ElementName=clonePath}" />
        <uirx:ValidationMessage x:Name="pathValidationMessage"
                                Grid.Row="4"
                                Grid.Column="1"
                                ValidatesControl="{Binding ElementName=clonePath}"
                                ReactiveValidator="{Binding BaseRepositoryPathValidator, Mode=OneWay}"
                                />
      </Grid>
    </Border>

    <Border x:Name="repositoriesListPane"
            Margin="0"
            BorderBrush="#EAEAEA"
            BorderThickness="0,1"
            FocusManager.IsFocusScope="True"
            FocusVisualStyle="{x:Null}">
      <Border.Resources>
        <Style BasedOn="{StaticResource GitHubTextBlock}" TargetType="{x:Type ui:TrimmedTextBlock}">
          <Style.Triggers>
            <Trigger Property="IsTextTrimmed" Value="True">
              <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Text}" />
            </Trigger>
          </Style.Triggers>
        </Style>
        <Style x:Key="cloneRepoHeaderStyle" TargetType="TextBlock">
          <Setter Property="Foreground" Value="{DynamicResource GHTextBrush}" />
          <Setter Property="Margin" Value="0,6,12,6" />
        </Style>
      </Border.Resources>
      <Grid Margin="0">
        <ListBox x:Name="repositoryList"
                 HorizontalContentAlignment="Stretch"
                 ItemsSource="{Binding Path=RepositoriesView, RelativeSource={RelativeSource AncestorType={x:Type local:GenericRepositoryCloneControl}}}"
                 SelectedItem="{Binding SelectedRepository}"
                 Style="{DynamicResource LightListBox}">
          <ListBox.GroupStyle>
            <GroupStyle HidesIfEmpty="true">
              <GroupStyle.ContainerStyle>
                <Style TargetType="{x:Type GroupItem}">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type GroupItem}">
                        <Expander IsExpanded="{Binding Name.IsExpanded}" Style="{StaticResource cloneGroupExpander}">
                          <Expander.Header>
                            <Border Style="{StaticResource repositoryBorderStyle}">
                              <StackPanel Margin="0"
                                          VerticalAlignment="Center"
                                          Orientation="Horizontal">
                                <Image x:Name="avatar"
                                       Width="16"
                                       Height="16"
                                       Margin="0,0,5,0"
                                       RenderOptions.BitmapScalingMode="HighQuality"
                                       Source="{Binding Items[0].Owner.Avatar}" />
                                <TextBlock Style="{StaticResource cloneRepoHeaderStyle}" Text="{Binding Path=Name.Header}" />
                              </StackPanel>
                            </Border>
                          </Expander.Header>
                          <ItemsPresenter Margin="0" />
                        </Expander>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </GroupStyle.ContainerStyle>
            </GroupStyle>
          </ListBox.GroupStyle>
          <ListBox.ItemTemplate>
            <DataTemplate>
              <Border Style="{StaticResource repositoryBorderStyle}">
                <StackPanel Margin="0"
                            VerticalAlignment="Center"
                            Orientation="Horizontal">
                  <ui:OcticonImage x:Name="iconPath"
                                   Width="16"
                                   Height="16"
                                   Margin="32,0,6,0"
                                   VerticalAlignment="Center"
                                   Foreground="#D0D0D0"
                                   Icon="{Binding Icon}" />

                  <ui:TrimmedTextBlock x:Name="label"
                                       VerticalAlignment="Center"
                                       Foreground="#666"
                                       Text="{Binding Name}"
                                       TextTrimming="CharacterEllipsis" />
                </StackPanel>
              </Border>
              <DataTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True" />
                    <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True" />
                  </MultiDataTrigger.Conditions>
                  <MultiDataTrigger.Setters>
                    <Setter TargetName="iconPath" Property="Foreground" Value="White" />
                    <Setter TargetName="label" Property="Foreground" Value="White" />
                  </MultiDataTrigger.Setters>
                </MultiDataTrigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </ListBox.ItemTemplate>
        </ListBox>
        <StackPanel x:Name="noRepositoriesMessage"
                    Margin="0,-70,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Visibility="{Binding NoRepositoriesFound, Mode=OneWay, Converter={ui:BooleanToVisibilityConverter}}">
          <TextBlock HorizontalAlignment="Center"
                     Style="{DynamicResource GitHubH2TextBlock}"
                     Text="{x:Static prop:Resources.noRepositoriesMessageText}" />
        </StackPanel>
      </Grid>
    </Border>
  </DockPanel>
</local:GenericRepositoryCloneControl>
